name: Deploy SaveOS

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environnement de d√©ploiement'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version √† d√©ployer'
        required: true
        default: 'latest'

jobs:
  deploy-staging:
    name: D√©ploiement Staging
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'staging' || (github.event_name == 'release' && contains(github.event.release.tag_name, 'alpha'))
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "üöÄ D√©ploiement en staging"
        echo "Version: ${{ github.event.release.tag_name || github.event.inputs.version }}"
        
        # Exemple de d√©ploiement Docker Swarm
        # docker stack deploy -c docker-compose.yml saveos-staging
        
        # Exemple de d√©ploiement Kubernetes
        # kubectl apply -f k8s/
        # kubectl set image deployment/saveos-api api=ghcr.io/org/saveos-api:$VERSION
        
        # Exemple de d√©ploiement simple
        # ssh user@staging-server "cd /opt/saveos && git pull && docker-compose up -d"

    - name: Run smoke tests
      run: |
        echo "üß™ Tests de fum√©e en staging"
        # curl -f https://staging.saveos.com/health
        # python scripts/smoke_tests.py --env staging

    - name: Notify deployment
      run: |
        echo "‚úÖ D√©ploiement staging termin√©"

  deploy-production:
    name: D√©ploiement Production
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production' || (github.event_name == 'release' && !contains(github.event.release.tag_name, 'alpha') && !contains(github.event.release.tag_name, 'beta'))
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Pre-deployment checks
      run: |
        echo "üîç V√©rifications pr√©-d√©ploiement"
        # V√©rifier que les images Docker existent
        # V√©rifier la disponibilit√© des services externes
        # V√©rifier les migrations de base de donn√©es

    - name: Deploy to production
      run: |
        echo "üöÄ D√©ploiement en production"
        echo "Version: ${{ github.event.release.tag_name || github.event.inputs.version }}"
        
        # D√©ploiement avec strat√©gie blue-green ou rolling update
        # Exemple avec Docker Swarm:
        # docker service update --image ghcr.io/org/saveos-api:$VERSION saveos_api
        
        # Exemple avec Kubernetes:
        # kubectl set image deployment/saveos-api api=ghcr.io/org/saveos-api:$VERSION
        # kubectl rollout status deployment/saveos-api

    - name: Post-deployment tests
      run: |
        echo "üß™ Tests post-d√©ploiement"
        # Tests de sant√© complets
        # Tests de performance
        # V√©rification des m√©triques

    - name: Rollback on failure
      if: failure()
      run: |
        echo "‚ö†Ô∏è √âchec du d√©ploiement - Rollback"
        # kubectl rollout undo deployment/saveos-api
        # docker service rollback saveos_api

    - name: Notify success
      run: |
        echo "‚úÖ D√©ploiement production r√©ussi"
        # Notification Slack/Discord/Email

  database-migration:
    name: Migration Base de Donn√©es
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install alembic

    - name: Run database migrations
      env:
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
      run: |
        echo "üóÑÔ∏è Migration de la base de donn√©es"
        # alembic upgrade head
        
        # Ou migration personnalis√©e
        python -c "
        from api.database import create_tables
        create_tables()
        print('‚úÖ Migrations appliqu√©es')
        "

    - name: Backup database
      run: |
        echo "üíæ Sauvegarde de la base de donn√©es"
        # pg_dump $DATABASE_URL > backup_$(date +%Y%m%d_%H%M%S).sql

  monitoring:
    name: Monitoring Post-D√©ploiement
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Check application health
      run: |
        echo "üîç V√©rification de la sant√© de l'application"
        # V√©rifier les endpoints critiques
        # curl -f https://api.saveos.com/health
        # curl -f https://app.saveos.com

    - name: Check metrics
      run: |
        echo "üìä V√©rification des m√©triques"
        # V√©rifier Prometheus/Grafana
        # Alertes automatiques si n√©cessaire

    - name: Performance monitoring
      run: |
        echo "‚ö° Monitoring des performances"
        # Tests de charge l√©gers
        # V√©rification des temps de r√©ponse

  cleanup:
    name: Nettoyage
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Cleanup old images
      run: |
        echo "üßπ Nettoyage des anciennes images"
        # Supprimer les images Docker anciennes
        # Nettoyer les artefacts temporaires

    - name: Update documentation
      run: |
        echo "üìö Mise √† jour de la documentation"
        # Mettre √† jour la documentation de d√©ploiement
        # Changelog de production