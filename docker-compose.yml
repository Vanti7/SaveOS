version: '3.8'

services:
  # Base de donn√©es PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: saveos_postgres
    environment:
      POSTGRES_DB: saveos
      POSTGRES_USER: saveos
      POSTGRES_PASSWORD: saveos123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U saveos"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis pour la queue
  redis:
    image: redis:7-alpine
    container_name: saveos_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO pour le stockage S3-compatible
  minio:
    image: minio/minio:latest
    container_name: saveos_minio
    environment:
      MINIO_ROOT_USER: saveos
      MINIO_ROOT_PASSWORD: saveos123456
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # API SaveOS
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: saveos_api
    environment:
      DATABASE_URL: postgresql://saveos:saveos123@postgres:5432/saveos
      REDIS_URL: redis://redis:6379/0
    volumes:
      - ./certs:/app/certs
      - borg_repos:/tmp/borg_repos
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "https://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Worker SaveOS
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: saveos_worker
    environment:
      DATABASE_URL: postgresql://saveos:saveos123@postgres:5432/saveos
      REDIS_URL: redis://redis:6379/0
    volumes:
      - borg_repos:/tmp/borg_repos
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Interface Web SaveOS
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: saveos_web
    environment:
      NEXT_PUBLIC_API_URL: https://api:8000
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  borg_repos:
    driver: local

networks:
  default:
    name: saveos_network